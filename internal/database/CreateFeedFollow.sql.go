// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: CreateFeedFollow.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createFeedFollows = `-- name: CreateFeedFollows :one
insert into feed_follows(id,user_id,feed_id)
VALUES (
    $1,
    $2,
    $3
)

RETURNING id, created_at, updated_at, user_id, feed_id,
(select name from users where id = feed_follows.user_id) as username,
(select name from feeds where id = feed_follows.feed_id) as feedname
`

type CreateFeedFollowsParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
	FeedID uuid.UUID
}

type CreateFeedFollowsRow struct {
	ID        uuid.UUID
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	UserID    uuid.UUID
	FeedID    uuid.UUID
	Username  string
	Feedname  string
}

func (q *Queries) CreateFeedFollows(ctx context.Context, arg CreateFeedFollowsParams) (CreateFeedFollowsRow, error) {
	row := q.db.QueryRowContext(ctx, createFeedFollows, arg.ID, arg.UserID, arg.FeedID)
	var i CreateFeedFollowsRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.FeedID,
		&i.Username,
		&i.Feedname,
	)
	return i, err
}
