// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: GetFeedFollowsForUser.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getFeedFollowsForUser = `-- name: GetFeedFollowsForUser :many
select feed_id,users.name as username,feeds.name as feedname
from feed_follows
join users
on users.id = feed_follows.user_id
join feeds
on feeds.id = feed_follows.feed_id
where feed_follows.user_id = $1
`

type GetFeedFollowsForUserRow struct {
	FeedID   uuid.UUID
	Username string
	Feedname string
}

func (q *Queries) GetFeedFollowsForUser(ctx context.Context, userID uuid.UUID) ([]GetFeedFollowsForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getFeedFollowsForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetFeedFollowsForUserRow
	for rows.Next() {
		var i GetFeedFollowsForUserRow
		if err := rows.Scan(&i.FeedID, &i.Username, &i.Feedname); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
